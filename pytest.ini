# filepath: /home/admin/dev/endo-ai/endoreg-db/pytest.ini
[pytest]
DJANGO_SETTINGS_MODULE = prod_settings
addopts = --reuse-db --cov=./endoreg_db/helpers --cov=endoreg_db/serializers --cov=endoreg_db/models --cov=endoreg_db/services --cov=endoreg_db/tasks --cov=endoreg_db/utils --cov=endoreg_db/views --cov-report=term-missing --cov-report=html --cov-fail-under=70 --ignore=lx-anonymizer/ --no-cov-on-fail --log-level=DEBUG --log-disable=faker
python_files = tests.py test_*.py *_test.py
testpaths = tests/

env =
    STORAGE_DIR = data/tests/storage

# Configure logging for pytest
log_cli = true
log_cli_level = DEBUG
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Disable specific loggers to reduce noise
log_level = DEBUG
logging_level = DEBUG

# Performance and test categorization markers
markers =
    slow: marks tests as slow (deselect with '-m "not slow"')
    expensive: marks computationally expensive tests
    video: marks tests that require video processing
    pipeline: marks tests that run full video pipeline
    ai: marks tests that require AI inference
    ffmpeg: marks tests that require FFmpeg
    integration: marks integration tests
    unit: marks unit tests
    api: marks API endpoint tests

# Suppress verbose logging and warnings from specific modules
filterwarnings = 
    ignore:.*faker.*
    ignore::UserWarning:faker
    ignore::DeprecationWarning:faker

# Pytest logging configuration
# This completely disables faker logging
[pytest.logging]
disable = faker