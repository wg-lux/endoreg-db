# Generated by Django 5.1.3 on 2025-04-06 19:13

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('endoreg_db', '0017_requirement_required_event_count_max_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='RequirementType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('name_de', models.CharField(blank=True, max_length=100, null=True)),
                ('name_en', models.CharField(blank=True, max_length=100, null=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.RemoveField(
            model_name='requirement',
            name='requirement_value_type',
        ),
        migrations.RemoveField(
            model_name='requirement',
            name='required_disease',
        ),
        migrations.RemoveField(
            model_name='requirement',
            name='required_disease_classification_choice',
        ),
        migrations.RemoveField(
            model_name='requirement',
            name='required_event',
        ),
        migrations.RemoveField(
            model_name='requirement',
            name='required_event_count',
        ),
        migrations.RemoveField(
            model_name='requirement',
            name='required_event_count_max',
        ),
        migrations.RemoveField(
            model_name='requirement',
            name='required_event_count_min',
        ),
        migrations.RemoveField(
            model_name='requirement',
            name='required_event_count_range_end',
        ),
        migrations.RemoveField(
            model_name='requirement',
            name='required_event_count_range_start',
        ),
        migrations.RemoveField(
            model_name='requirement',
            name='required_examination_indication',
        ),
        migrations.RemoveField(
            model_name='requirement',
            name='required_lab_value',
        ),
        migrations.RemoveField(
            model_name='requirement',
            name='requirement_operator',
        ),
        migrations.RemoveField(
            model_name='requirement',
            name='time_window_end_days',
        ),
        migrations.RemoveField(
            model_name='requirement',
            name='time_window_end_hours',
        ),
        migrations.RemoveField(
            model_name='requirement',
            name='time_window_end_months',
        ),
        migrations.RemoveField(
            model_name='requirement',
            name='time_window_end_weeks',
        ),
        migrations.RemoveField(
            model_name='requirement',
            name='time_window_end_years',
        ),
        migrations.RemoveField(
            model_name='requirement',
            name='time_window_start_days',
        ),
        migrations.RemoveField(
            model_name='requirement',
            name='time_window_start_hours',
        ),
        migrations.RemoveField(
            model_name='requirement',
            name='time_window_start_months',
        ),
        migrations.RemoveField(
            model_name='requirement',
            name='time_window_start_weeks',
        ),
        migrations.RemoveField(
            model_name='requirement',
            name='time_window_start_years',
        ),
        migrations.AddField(
            model_name='requirement',
            name='disease_classification_choices',
            field=models.ManyToManyField(blank=True, related_name='required_in', to='endoreg_db.diseaseclassificationchoice'),
        ),
        migrations.AddField(
            model_name='requirement',
            name='diseases',
            field=models.ManyToManyField(blank=True, related_name='required_in', to='endoreg_db.disease'),
        ),
        migrations.AddField(
            model_name='requirement',
            name='events',
            field=models.ManyToManyField(blank=True, related_name='required_in', to='endoreg_db.event'),
        ),
        migrations.AddField(
            model_name='requirement',
            name='examination_indications',
            field=models.ManyToManyField(blank=True, related_name='required_in', to='endoreg_db.examinationindication'),
        ),
        migrations.AddField(
            model_name='requirement',
            name='examinations',
            field=models.ManyToManyField(blank=True, related_name='required_in', to='endoreg_db.examination'),
        ),
        migrations.AddField(
            model_name='requirement',
            name='finding_interventions',
            field=models.ManyToManyField(blank=True, related_name='required_in', to='endoreg_db.findingintervention'),
        ),
        migrations.AddField(
            model_name='requirement',
            name='finding_location_classification_choices',
            field=models.ManyToManyField(blank=True, related_name='required_in', to='endoreg_db.findinglocationclassificationchoice'),
        ),
        migrations.AddField(
            model_name='requirement',
            name='finding_morphology_classification_choices',
            field=models.ManyToManyField(blank=True, related_name='required_in', to='endoreg_db.findingmorphologyclassificationchoice'),
        ),
        migrations.AddField(
            model_name='requirement',
            name='findings',
            field=models.ManyToManyField(blank=True, related_name='required_in', to='endoreg_db.finding'),
        ),
        migrations.AddField(
            model_name='requirement',
            name='lab_values',
            field=models.ManyToManyField(blank=True, related_name='required_in', to='endoreg_db.labvalue'),
        ),
        migrations.AddField(
            model_name='requirement',
            name='numeric_value',
            field=models.FloatField(blank=True, help_text='Numeric value for the requirement. If not set, the requirement is not used in calculations.', null=True),
        ),
        migrations.AddField(
            model_name='requirement',
            name='numeric_value_max',
            field=models.FloatField(blank=True, help_text='Maximum numeric value for the requirement. If not set, the requirement is not used in calculations.', null=True),
        ),
        migrations.AddField(
            model_name='requirement',
            name='numeric_value_min',
            field=models.FloatField(blank=True, help_text='Minimum numeric value for the requirement. If not set, the requirement is not used in calculations.', null=True),
        ),
        migrations.AddField(
            model_name='requirement',
            name='operators',
            field=models.ManyToManyField(blank=True, related_name='required_in', to='endoreg_db.requirementoperator'),
        ),
        migrations.AddField(
            model_name='requirement',
            name='string_value',
            field=models.CharField(blank=True, help_text='String value for the requirement. If not set, the requirement is not used in calculations.', max_length=100, null=True),
        ),
        migrations.AddField(
            model_name='requirement',
            name='string_values',
            field=models.TextField(blank=True, help_text=" ','-separated list of string values for the requirement.If not set, the requirement is not used in calculations.", null=True),
        ),
        migrations.AddField(
            model_name='requirement',
            name='unit',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='required_in', to='endoreg_db.unit'),
        ),
        migrations.AddField(
            model_name='requirement',
            name='requirement_types',
            field=models.ManyToManyField(blank=True, related_name='linked_requirements', to='endoreg_db.requirementtype'),
        ),
        migrations.AddField(
            model_name='requirementsettype',
            name='requirement_types',
            field=models.ManyToManyField(blank=True, related_name='requirement_set_types', to='endoreg_db.requirementtype'),
        ),
        migrations.DeleteModel(
            name='RequirementValueType',
        ),
    ]
