from django.db import models
from django.db.models import Q, CheckConstraint

from typing import TYPE_CHECKING, Union

if TYPE_CHECKING:
    from endoreg_db.models import Frame, RawFrame, Label


class ImageClassificationAnnotation(models.Model):
    """
    Represents an image classification annotation, linking a label to a specific frame.

    An annotation must be associated with exactly one of either a `Frame` or a `RawFrame`.
    This exclusivity is enforced by a database constraint.

    Attributes:
        frame (ForeignKey): The processed frame associated with the annotation (nullable).
        raw_frame (ForeignKey): The raw frame associated with the annotation (nullable).
        label (ForeignKey): The label assigned to the annotation.
        value (bool): Indicates if the classification is true/positive.
        float_value (FloatField): Optional float value associated with the classification (e.g., confidence score).
        annotator (str): Identifier for the user or process that created the annotation.
        model_meta (ForeignKey): Optional link to the model metadata if generated by a model.
        date_created (datetime): The creation timestamp of the annotation.
        date_modified (datetime): The last modification timestamp of the annotation.
        information_source (ForeignKey): Optional link to the source of this information.
    """

    # Foreign keys to Frame and RawFrame. Exactly one must be non-null.
    frame = models.ForeignKey(
        "Frame",
        on_delete=models.CASCADE,
        blank=True,
        null=True,
        related_name="image_classification_annotations",
    )

    raw_frame = models.ForeignKey(
        "RawFrame",
        on_delete=models.CASCADE,
        blank=True,
        null=True,
        related_name="image_classification_annotations",
    )

    label = models.ForeignKey(
        "Label",
        on_delete=models.CASCADE,
        related_name="image_classification_annotations",
    )
    value = models.BooleanField()
    float_value = models.FloatField(blank=True, null=True)
    annotator = models.CharField(max_length=255, blank=True, null=True)
    model_meta = models.ForeignKey(
        "ModelMeta",
        on_delete=models.SET_NULL,
        related_name="image_classification_annotations",
        default=None,
        null=True,
        blank=True,
    )
    date_created = models.DateTimeField(auto_now_add=True)
    date_modified = models.DateTimeField(auto_now=True)
    information_source = models.ForeignKey(
        "InformationSource",
        on_delete=models.SET_NULL,
        related_name="image_classification_annotations",
        default=None,
        null=True,
        blank=True,
    )

    if TYPE_CHECKING:
        frame: "Frame"
        raw_frame: "RawFrame"
        label: "Label"

    class Meta:
        constraints = [
            CheckConstraint(
                check=(
                    Q(frame__isnull=True, raw_frame__isnull=False) |
                    Q(frame__isnull=False, raw_frame__isnull=True)
                ),
                name='exactly_one_frame_or_raw_frame'
            )
        ]

    def __str__(self) -> str:
        """
        String representation of the annotation.
        """
        return f"{self.label.name} - {self.value}"

    def get_frame(self):
        """
        Get the frame or raw_frame associated with the annotation.

        Returns the non-null frame instance (`Frame` or `RawFrame`).
        Based on the database constraint, exactly one of these will be non-null.
        """
        if self.frame:
            return self.frame
        else:
            return self.raw_frame
